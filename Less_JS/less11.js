"use strict";
const arr = [1, 2, 3]; //массив это перечень информации по порядку, у каждой сущности есть свой номер, и порядок играет важгую роль
//по этим номерам мы можем обращаться к разным сущьностям
console.log(arr[1]);

const obj = {'anna': 1,
 'bill': 2
};
console.log(obj['anna']);

//ТИПЫ ДАННЫХ В JS - ПРОСТЫ ТИПЫ / ОБЪЕКТЫ / ОБЫЧНЫЕ ОБЪЕКТЫ
// ПРОСТЫ ТИПЫ: Числа, Строки, ЛОгический тип, null, undefind, Symbol, Bigint //
//Число:
let number = 4.5; // 4.5 это числовой тип данных
console.log(number / -0); //Получаем числовой тип данных -infiniti относящийся к примитивам и обозначает бесконечность
console.log('string' / 0); //Получаем специфический числовой тип NaN
//Строка:
const persone = 'Alex'; //Классический тип данных строка
const bool = true or false;//Булиновый тип данных, вам есть 18 записывается ответ true или false
console.log(something);//Получим ошибку ссылочного типа null
let und;
console.log(und); //Получаем undefined когда что то сущесвует но у него нет никакого значения
//Значения Symbol на практике почти не используется
//Bigint большие числа тоже крайне редко

// ОБЪЕКТЫ //
// СПЕЦ.ОБЪЕКТЫ / Массивы [] / Функции function / Объект Даты / Регулярные выражения / Ошибки
const obj = {
    name: 'Alex',
    age: 45,
    ismarried: false
};
//console.log(obj{name});//JS думает как будто мы используем переменую name, но её не сущ-ет поэтому
console.log(obj['name']); //нам нужно поместить её к ковычки 'name'
//console.log(obj.name);

//Массивы - это частный случай объектов
let arr = [1, 2, 3, 'Alex'];
console.log(arr[3]);
//Массивы они служат для того что бы наши элементы были строго по порядку

//Разница между объектами и массивали 
const arr = [1, 2, 3,]; //Массивы это перечень информации по порядку т.е у каждой сущности есть свой номер
//по этим номерам мы може обращаься к этим сущьностям
const obj = {a: 1, b: 2,}; //Структура хранения данных в парном формате - ключ: значение
//свойства в объектах это строки и мы их можем записывать в 2х форматах: 'Anna': 25 or Anna: 25
//В МАССИВАХ ПУСТЫЕ ДАННЫЕ НЕ ПРИВЕТСТВУЮТСЯ

const arr = ['a', 'b', 'c'];
const arrobj = {a: 'a', '1': 'b', 2: 'c'};
console.log(arr[1]);
console.log(arrobj[1]); //вывод значения через квадратные скобки позволяет избежать ошибок

const arrobj = {a: 'a', '1': 'b', 2: 'c'};
arrobj.b = '1234'; //создаём новое свойство внутри объекта, это можно сделать 2мя способами
console.log(arrobj['b']); //если переменную b сделать без ковычек то мы полусаем ошибку
console.log(arrobj.b); //либо можно обратиться через точку


const arrobj = {a: 'a', '1': 'b', 2: 'c'};
arrobj['b'] = '1234'; //Созжали свойтва с помощью [] скобок 
console.log(arrobj.b); 


const arrobj = {a: 'a', '1': 'b', 2: 'c'};
const b = 'c'; //если у нас есть какая либо переменная, которая содержит определенное значение 
arrobj['c'] = '1234'; //то её можно использовать тут чтобы создавать новые свойства т.е вместо переменной b подставится значение 'c'
console.log(arrobj['c']);//тут бужет создано свойство внутри этого объекта и в него записано это значение 1234

//Внутри объектов можно создавать вложенные структыры
const arrobj = {a: 'a', '1': 'b', 2: 'c',
abc: {
    def: {Kirill: 500} //Форма записи вложенных объектов
}
};
console.log(arrobj['abc']['def']); //Предпочтительная форма записи
console.log(arrobj.abc.def);